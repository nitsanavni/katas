
# 2024-09-06 23:59:55.234692
+number names kata, typescript, bun.sh
+
+start us off with a dummy failing test
+
+here's an example
+
+import { expect, test } from "bun:test";
+
+test("2 + 2 should equal 4", () => {
+  expect(2 + 2).toBe(4);
+});
+

# 2024-09-07 00:02:15.144373
+@numberNames.test.ts
+
+correct the expectation
+don't add production code

# 2024-09-07 00:04:34.855670
+@numberNames.test.ts
+
+define the missing function w empty body

# 2024-09-07 00:28:29.772419
+@numberNames.test.ts
+
+move the function to new file

# 2024-09-07 00:29:41.086002
+@numberNames.test.ts
+@numberNames.ts
+
+change function to const arrow function

# 2024-09-07 00:31:51.003033
+@numberNames.test.ts
+
+single parameterized test

# 2024-09-07 00:34:05.546160
+@numberNames.test.ts
+
+just use tuples instead of {input, expected}

# 2024-09-07 00:39:17.516198
+@numberNames.ts
+@numberNames.test.ts
+
+let's get to 19

# 2024-09-07 00:40:34.764419
+@numberNames.ts
+@numberNames.test.ts
+
+add 20

# 2024-09-07 00:42:16.431677
+@numberNames.ts
+@numberNames.test.ts
+
+add 21

# 2024-09-07 00:44:29.106960
+@numberNames.ts
+
+for 21, let's have a special case reusing existing strings

# 2024-09-07 00:45:36.794247
+@numberNames.ts
+
+for 21,also reuse "one"

# 2024-09-07 00:47:21.221818
+@numberNames.ts
+
+21:
+calc 20 and 1 from 21

# 2024-09-07 00:49:09.355135
+@numberNames.ts
+
+instead of indexing with tens * 10, let's define another array that can be indexed directly with tens

# 2024-09-07 00:51:02.952074
+@numberNames.test.ts
+
+add some random tests up to 100, not many

# 2024-09-07 00:54:06.975064
+@numberNames.ts
+
+support 100

# 2024-09-07 01:02:46.696230
+@numberNames.ts
+
+100: extract the 1 from 100

# 2024-09-07 01:04:28.258668
+@numberNames.test.ts
+
+add some random tests up to 1000, not many

# 2024-09-07 01:07:46.154428
+@numberNames.test.ts
+
+remove comments

# 2024-09-07 01:09:48.178653
+@numberNames.test.ts
+@numberNames.ts
+
+let's drop the "and"

# 2024-09-07 01:11:04.346180
+@numberNames.test.ts
+
+add test 1000

# 2024-09-07 01:12:22.517308
+@numberNames.ts
+
+support 1000
+
+we now get:
+Expected: "one thousand"
+Received: "ten hundred"

# 2024-09-07 01:13:22.843435
+@numberNames.ts
+
+1000: extract the 1 from 1000

# 2024-09-07 01:16:25.108271
+@numberNames.test.ts
+
+add some random tests up to 10000, not many

# 2024-09-07 01:17:29.130936
+@numberNames.ts
+
+support 1234

# 2024-09-07 01:19:12.934197
+@numberNames.test.ts
+
+test for 10k

# 2024-09-07 01:19:47.528003
+@numberNames.test.ts
+
+remove comments

# 2024-09-07 01:20:21.818070
+@numberNames.test.ts
+
+add some random tests up to 1000000, not many

# 2024-09-07 01:21:57.759275
+@numberNames.ts
+
+support 25000

# 2024-09-07 01:22:14.327273
+@numberNames.ts
+
+support 25000
+

# 2024-09-07 01:23:21.648358
+@numberNames.ts
+
+support 25000
+by numberName(thou...

# 2024-09-07 01:23:50.797805
+@numberNames.ts
+
+support 25000
+by numberName(thou... iso numberNames[thou...

# 2024-09-07 01:24:26.195152
+@numberNames.ts
+
+use numberName(thou... iso numberNames[thou...

# 2024-09-07 01:25:17.822969
+@numberNames.ts
+
+thousands
+recursively reuse the function instead of indexing the array

# 2024-09-07 01:26:18.260019
+@numberNames.ts
+
+support 1M

# 2024-09-07 01:28:16.500530
+@numberNames.test.ts
+
+add some random tests up to 1B, not many

# 2024-09-07 01:29:04.213026
+@numberNames.test.ts
+
+add some more crazy  random tests up to 1B, not many

# 2024-09-07 01:32:55.592371
+@numberNames.ts
+
+those 3 first if blocks look very similar
+can we extract a function to be reused?

# 2024-09-07 01:35:18.621651
+@numberNames.ts
+
+those 3 first if blocks look like a 'find' to me...

# 2024-09-07 01:36:35.845320
+@numberNames.ts
+
+those 3 first if blocks look like a 'find' to me...
+
+1. define help function const find = (arr:T[], predicate):T => 
+2. use it

# 2024-09-07 01:38:40.277737
+@numberNames.ts
+
+no need for extra functio find, use arr.find directly
