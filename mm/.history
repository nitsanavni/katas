
# 2024-08-31 12:29:33.587507
+@index.ts
+
+allow the controlled square to cross grid boundaries, going back to other extreme

# 2024-08-31 22:52:10.770103
+@render.ts
+@index.ts
+
+extract state to state.ts

# 2024-08-31 22:56:08.193735
+@index.ts
+
+extract
+
+const onKey = (state) => (str, key) => { ...

# 2024-08-31 22:58:52.817640
+@index.ts
+@render.ts
+@state.ts
+
+mv onKey to onKey.ts

# 2024-08-31 23:01:16.981969
+@onKey.ts
+@index.ts
+
+import onKey

# 2024-08-31 23:22:17.311165
+@state.ts
+
+indent and dedent should affect also all the node's "children" - the following nodes that are ate least one indentation more than the indented item (the parent) up to an item that's at most the same indentation as the parent or the end of the list

# 2024-08-31 23:25:21.772298
+@state.ts
+
+1. don't allow the root node to be indented
+2. don't indent more than 1 more than the item beofre

# 2024-08-31 23:27:30.086127
+@state.ts
+
+indent: don't allow item n to have more than (indent(n-1)+1)

# 2024-08-31 23:28:09.584109
+@state.ts
+
+indent: don't allow indent(item n) to exceed (indent(n-1)+1)

# 2024-09-01 10:10:04.442700
+@state.ts
+
+indentItem: invert the main if, make it a guard clause, so that the rest of the code is less nested

# 2024-09-01 10:23:03.273537
+@render.ts
+
+no need for the file-level lets
+all the data is passed as args to the function

# 2024-09-01 10:26:45.173185
+@render.ts
+
+extract these functions:
+renderItem, calling:
+renderSelectedItem
+renderNonSelectedItem

# 2024-09-01 10:28:26.409434
+@render.ts
+
+extract function renderItem

# 2024-09-01 10:31:24.236911
+@render.ts
+
+extract function renderSelected

# 2024-09-01 10:31:48.011481
+@render.ts
+
+extract function renderSelectedItem

# 2024-09-01 10:34:59.191093
+@onKey.ts
+
+rm log existing

# 2024-09-01 10:37:04.265223
+@onKey.ts
+
+rm log existing...

# 2024-09-01 10:37:25.842426
+@onKey.ts
+
+remove log existing...

# 2024-09-01 10:39:54.083308
+@render.ts
+
+if item is empty still show one highlighted char in nav mode

# 2024-09-01 10:50:05.354193
+@render.ts
+
+create a new typescript file cat.ts
+
+it has one function that concatenates two multi-line strings
+const cat = (lhs: string, rhs: string): string => { ...
+
+it's like a zip operation
+each line on the left is concatenated to the line on the right
+but first padEnd (spaces) the lhs lines to all have same lenght

# 2024-09-01 10:54:33.282756
+@cat.ts
+
+how can we add some tests to the same file that only execute if this file is the entry point

# 2024-09-01 10:56:11.261078
+@cat.ts
+
+extract a function for te tests

# 2024-09-01 10:58:53.705685
+@cat.ts
+
+let's use this style for the tsts:
+
+import { expect, test } from "bun:test";
+
+test("2 + 2 should equal 4", () => {
+  expect(2 + 2).toBe(4);
+});
+

# 2024-09-01 11:04:21.281823
+@cat.ts
+
+remove the if module main part

# 2024-09-01 11:28:02.790452
+@renderTree.ts
+
+for the tests, expected strings: use multi-line strings for readability

# 2024-09-01 11:29:56.441041
+@renderTree.ts
+
+fix the expected to be like this:
+
+renderTree.ts:
+âœ“ cat function tests [1.23ms]
+51 |     { text: "Child 1", indent: 1 },
+52 |     { text: "Child 2", indent: 1 },
+53 |     { text: "Grandchild 1", indent: 2 },
+54 |     { text: "Grandchild 2", indent: 2 },
+55 |   ];
+56 |   expect(getTree(items1)).toBe(`Root
+                               ^
+error: expect(received).toBe(expected)
+
+Expected: "Root\nChild 1\nChild 2\nGrandchild 1\nGrandchild 2"
+Received: "RootChild 1\nChild 2Grandchild 1\nGrandchild 2"

# 2024-09-01 17:56:17.270097
+@renderTree.ts
+
+remove console logs

# 2024-09-01 17:59:24.302373
+@render.ts
+@renderTree.ts
+
+let's support "edit mode" / "navigate mode" in the renderTree too
+

# 2024-09-01 18:17:01.733800
+@render.ts
+@renderTree.ts
+
+let's support "edit mode" / "navigate mode" in the renderTree too
+need to pass in all relevant args
+

# 2024-09-02 20:05:57.155613
+@render.ts
+@renderTree.ts
+
+I think we need to import renderSelected

# 2024-09-02 20:06:58.308222
+@render.ts
+@renderTree.ts
+
+I think we need to export renderselected

# 2024-09-02 20:09:35.599792
+@cat.ts
+
+move the tests to own file cat.spec.ts

# 2024-09-02 20:10:31.014306
+@renderTree.ts
+
+move test to own file .spec.ts

# 2024-09-02 20:13:54.885137
+@renderTree.ts
+@renderTree.spec.ts
+
+remove the tests from renderTree as they were already moved to the spec file

# 2024-09-02 20:56:35.448720
+@render.ts
+@renderTree.ts
+
+make a copy of render selected in renderTree

# 2024-09-02 20:57:39.835178
+@renderTree.ts
+
+use local renderSelected rather than imported one

# 2024-09-02 21:02:33.427814
+@cat.ts
+
+add docs 

# 2024-09-02 21:04:47.147143
+@cat.ts
+
+add docs 
+concatentes two multi-line strings, treating them as rectangular blocks / boxes,
+ret the new multi-line
+you can use ascii art to show two boxes of different sizes being cat

# 2024-09-02 21:07:21.849851
+@cat.ts
+
+update the doc
+ascii art
+make rhs taller than lhs

# 2024-09-02 21:09:40.624655
+@cat.ts
+
+upda the doc
+remove ascii art
+use two multiline strings
+
+two phrases about mindmaps, with multilines, different num lines, different line lenghts

# 2024-09-02 21:10:10.190402
+@cat.ts
+
+upda the doc
+remove ascii art
+use two multiline strings
+
+two phrases about mindmaps, with multilines, different num lines, different line lenghts
+about 10 words per phrase

# 2024-09-02 21:13:15.068699
+@cat.ts
+
+upda the doc
+remove ascii art
+use two multiline strings
+
+lhs
+Mindmaps clarify
+thoughts and
+ideas.
+
+rhs
+Organize
+concepts
+visually
+with mindmaps.

# 2024-09-02 21:27:22.541381
+@onKey.ts
+@state.ts
+
+let's add an action: "add child"
+keyboard: "c"
+
+a child is a list item positioned right after its parent (i+1) with indent also +1 than its parent
+

# 2024-09-02 21:29:28.974461
+@onKey.ts
+
+c -> addChild should only be in non edit mode

# 2024-09-02 21:31:39.794204
+@onKey.ts
+@state.ts
+
+let's add 's' -> addSiblin based on addChild

# 2024-09-02 21:35:38.065643
+@onKey.ts
+@state.ts
+
+in nav mode:
+left arrow: go to parent
+right arrow: got to first child

# 2024-09-03 13:22:55.811013
+@state.ts
+
+add action 'saveOutlineToFile(filePath)'
+saves the list of items in a text file
+indents by {two spaces} * item.indent

# 2024-09-03 13:27:51.842504
+@state.ts
+@onKey.ts
+@index.ts
+
+get filename from cli first positional arg
+e.g. `./index.ts my-mindmap`
+
+save to file every 500ms

# 2024-09-03 13:33:50.518904
+@state.ts
+
+do this instead:
+const path = "./file.txt";
+await Bun.write(path, "Your text here");
+

# 2024-09-03 13:37:38.636434
+@onKey.ts
+
+first abort previous timeout then set the new one

# 2024-09-03 13:45:17.130089
+@state.ts
+
+don't console log on file save

# 2024-09-03 13:47:19.694222
+@state.ts
+
+first thing:
+if file exists
+parse it and populate the list (inverse of save)

# 2024-09-03 13:49:35.982278
+@index.ts
+@state.ts
+
+call the load outline from file

# 2024-09-03 13:51:18.602968
+@state.ts
+
+this is how you read in Bun:
+
+const file = Bun.file("./file.txt");
+const content = await file.text();

# 2024-09-04 12:04:28.389605
+@state.ts
+
+iso console error
+when file doesnt exist , just create an empty one

# 2024-09-04 12:06:35.497552
+@state.ts
+
+don't use the console

# 2024-09-04 21:41:39.106870
+@state.ts
+@onKey.ts
+
+in edit more, tab -> addChild

# 2024-09-04 21:45:26.129510
+@state.ts
+
+addChild: add the child *after* all existing descendents

# 2024-09-04 21:50:24.418728
+@onKey.ts
+@state.ts
+
+enter (in both edit mode and in nav mode) -> add siblin

# 2024-09-04 21:54:58.240441
+@state.ts
+
+addSiblin:
+only add after the current item's descendents

# 2024-09-04 22:02:01.952562
+@renderTree.ts
+
+add a char on the left of children
+a yellow middle dot

# 2024-09-04 22:03:46.437802
+@renderTree.ts
+
+yellow dot:
+1. make it smaller
+2. only on the *left* (start) of children
+3. no extra spaces

# 2024-09-04 22:05:37.423292
+@renderTree.ts
+
+yellow dot:
+only draw it on the left of direct children

# 2024-09-04 22:07:52.389732
+@renderTree.ts
+
+yellow dot:
+change the algo
+where we determine how to draw the item.text iteself - this is where we need to add the dot

# 2024-09-04 22:12:01.451209
+@renderTree.ts
+
+yellow dot:
+remove current implementation, it's not right
+it should be added at the start of the parent, in the section starting with:
+const paddedParentLines = [

# 2024-09-04 22:14:00.001408
+@renderTree.ts
+
+yellow dot:
+should be added on the line of the parent, not the first line

# 2024-09-04 22:15:46.616196
+@renderTree.ts
+
+yellow dot:
+should be added at the start of the last line of the parent block, not necessarily yhe first line

# 2024-09-04 22:17:47.651703
+@renderTree.ts
+
+yellow dot:
+1. make it smaller
+2. no space between the dot and the text

# 2024-09-04 22:19:14.871904
+@renderTree.ts
+
+yellow dot: make it smaller, like the normal dot symbol

# 2024-09-04 22:25:00.641093
+@state.ts
+
+start off in nav mode (not edit mode)
+after loading from the file

# 2024-09-05 09:52:52.290990
+@onKey.ts
+
+add debug prints of received keys

# 2024-09-05 09:56:27.122732
+@onKey.ts
+
+add debug prints of received keys: show all fields, not just name

# 2024-09-05 09:58:37.246275
+@onKey.ts
+
+iso log, use debug

# 2024-09-05 10:02:17.015709
+@onKey.ts
+
+remove all usage of Esc
+
+to exit edit mode use `"name":"x","ctrl":true`
+
+you're the best

# 2024-09-05 10:10:25.215707
+@state.ts
+
+add deleteCurrentNode
+- deletes the node
+- current item: prev siblin || parent

# 2024-09-05 10:11:28.452686
+@state.ts
+
+delete:
+- also delets all node's descendents

# 2024-09-05 10:17:55.127786
+@state.ts#O

# 2024-09-05 10:24:35.450543
+@state.ts
+@onKey.ts
+
+backspace -> deleteNode

# 2024-09-05 10:26:23.075854
+@state.ts
+@onKey.ts
+
+in nav mode (no edit mode)
+backspace -> deleteCurrentNode

# 2024-09-05 21:19:32.082887
+@state.ts
+
+---
+
+deleteCurrentNode
+
+should identify node's descendents
+then delete the node and the descendents
+select prev siblin, or if not exist the parent
+

# 2024-09-06 09:58:00.714266
+@state.ts
+
+let's prepare to move each state-transforming function to its own file
+let's start with a adding a type for such a function
+
+new type:
+(state) => state
+
+some functions will take the form of:
+(args) => (state) => state
+
+for example addChar
+const addChar => (theChar) => (state) => state
+
+so let's start by just adding the new type

# 2024-09-06 10:59:30.751012
+@state.ts
+
+let's prepare to move each state-transforming function to its own file
+let's start with a adding a type for such a function
+
+new type:
+(state) => state
+
+some functions will take the form of:
+(args) => (state) => state
+
+for example addChar
+const addChar => (theChar) => (state) => state
+
+so let's start by just adding the new type
+
+---
+
+note that the `state` means the data (e.g. cursorPosition) not the big object with all the functionality

# 2024-09-06 11:05:42.362971
+@state.ts
+ 
+let's prepare to move each state-transforming function to its own file
+
+let's extract a transform for the last function that transforms state (loadFromFile)
+extract a const loadFromFile = (path) => (state) => state

# 2024-09-06 11:08:10.299612
+@state.ts
+
+let's move the const loadFromFile to new file

# 2024-09-06 11:11:37.857424
+@loadFromFile.ts
+@state.ts
+
+import from loadFromFile

# 2024-09-06 11:13:42.103290
+@state.ts
+
+loadOutlineFromFile
+use obj destructuring

# 2024-09-06 11:16:16.269037
+@state.ts
+
+let's use a `stateObj: State` instead of the 4 lets

# 2024-09-06 11:21:56.725018
+@state.ts
+
+can we update stateObj from newState using spread op?

# 2024-09-06 11:24:27.692187
+@state.ts
+
+on that last function, no need for intermediate `newState`, can inline it

# 2024-09-06 11:27:03.038099
+@state.ts
+
+on that last function, can we pass stateObj directly instead of constructing a new obj?
