#!/bin/bash

# TODOs
# - `chat -f function-def.json -f func2.json PROMT`: to use functionn calling
# - `chat -e PROMPT`: execute commands on host in a loop
# - stream the responses, when tty
#   we should prob port to python first, see https://cookbook.openai.com/examples/how_to_stream_completions
# - when starting a new conversation (i.e. CONTINUE eq false), save the previous one
#   to `~/.chat-${epoch}`, or use gpt-3 to give it a title `~/.chat-${title}`
# - `chat --ls/-l`: list previous conversations
#    can use fzf, with a pretty preview
# - interactive prompt builder, file chooser (fzf), line-range chooser
# - ~/.chat should be a folder
# - ~/.chatrc

CHAT_FILE="$HOME/.chat"

MODEL="gpt-4o-mini"
API_URL="https://api.openai.com/v1/chat/completions"

CONTINUE=false
SHOW_CONVERSATION=false

while getopts ":3cs" opt; do
    case $opt in
    3)
        MODEL="gpt-3.5-turbo"
        ;;
    c)
        CONTINUE=true
        ;;
    s)
        SHOW_CONVERSATION=true
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

if $SHOW_CONVERSATION; then
    jq -r '.[]|("# "+.role,"",.content,"","")' "$CHAT_FILE" | bat -l md --style plain
    exit 0
fi

USER_MESSAGE="$*"

if $CONTINUE && [ -s "$CHAT_FILE" ]; then
    OLD_CONVERSATION_JSON=$(<"$CHAT_FILE")
else
    OLD_CONVERSATION_JSON="[]"
fi

OLD_CONVERSATION_JSON=$(echo "$OLD_CONVERSATION_JSON" |
    jq --arg msg "$USER_MESSAGE" '. + [{"role": "user", "content": $msg}]')

read -r -d '' PAYLOAD <<-EOM
{
   "model": "$MODEL",
   "messages": $OLD_CONVERSATION_JSON
}
EOM

# call the openai api
RESPONSE=$(curl -sS "$API_URL" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    --data "$PAYLOAD")

ASSISTANT_MESSAGE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

# save the assistant's response to the chat file
echo "$OLD_CONVERSATION_JSON" |
    jq --arg msg "$ASSISTANT_MESSAGE" \
        '. + [{"role": "assistant", "content": $msg}]' >"$CHAT_FILE"

# print gpt's reponse
echo "$RESPONSE" |
    jq -r '(.choices[0].message.content,.error.message)//empty' |
    (bat -l md --file-name GPT --style plain --paging=never - || cat -)
